import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as d,a as s,b as n,e,w as t,d as o}from"./app-91069e5e.js";const p={},u=s("h1",{id:"_7-编程学习的心得分享-仅个人心得-仅供参照或选择忽略-勿喷",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-编程学习的心得分享-仅个人心得-仅供参照或选择忽略-勿喷","aria-hidden":"true"},"#"),n(" 7.编程学习的心得分享（仅个人心得，仅供参照或选择忽略，勿喷）")],-1),r=s("h2",{id:"_1-学会做笔记-有自己的笔记库",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-学会做笔记-有自己的笔记库","aria-hidden":"true"},"#"),n(" 1.学会做笔记，有自己的笔记库")],-1),k=s("p",null,"你一定要学会做自己的笔记，无论你是用本子做笔记还是用电脑软件做笔记，都要有对知识点的总结，有在学习过程中或 编程/开发 练习中遇到的问题的思考。",-1),h=o(`<h2 id="_2-代码不要死记硬背-关键在于理解是干嘛的" tabindex="-1"><a class="header-anchor" href="#_2-代码不要死记硬背-关键在于理解是干嘛的" aria-hidden="true">#</a> 2.代码不要死记硬背，关键在于理解是干嘛的</h2><p>这里说的代码不要死记硬背，不是说的不要去记忆一些东西，当然还是有东西需要去记住的。比如说我们C语言的int、double、float、for、while、case、switch、break等等关键字还有C语言的语法等，这些肯定都是需要记的。就像学习英语你不知道单词，不知道语法能学好英语吗？我们的代码就相当于英语语句，记住了英语单词、词组、语法等那么写出英语语句就不会是件特别难的事情了。我们的代码也是如此，掌握了关键字、语法等写出代码也会很轻松。</p><p>那哪些东西不要去记呢？举个例子，无论是C语言，还是Java，还是数据库SQL语言等等，都有成百上千往上走的函数/类，这些其实除了一些常用的，其它的我们都不需要去记，你只需要知道在某个语言中应该有某个功能的函数就够了，那我们要用的时候怎么找这个函数呢？其实很简单，到CSDN、博客园、稀土掘金等程序员社区去找就行了。</p><blockquote><p>比如说我想在C语言中生成随机数，但是忘记代码是怎么写来着，直接搜索“<code>C语言生成随机数</code>”之类的关键词到程序员社区找就行了，肯定是有的，都是前人的经验。</p></blockquote><p>我以C语言为例，带大家来浅浅探讨一段令无数程序员肾上腺素飙升的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=s("code",null,"#",-1),m=o("<p>那处理什么呢？我们接着往后看，后接单词<code>include</code>，即<code>包含</code>，<code>包含</code>这个词和<code>导入</code>差不多，在编程世界里<code>导入</code>一词更为专业，因此我们之后讲解是我用<code>导入</code>来代替<code>包含</code>。</p>",1),v=s("code",null,".h",-1),b=s("code",null,"stdio.h",-1),f=o("<p>stdio具体又是个怎样的文件呢？stdio实际是一个缩写，我们把stdio进行一个拆分：</p><ul><li><mark>std</mark>：<code>standard</code>的缩写，翻译成中文为”<code>标准</code>“</li><li><mark>i</mark>：<code>input</code>的缩写，翻译成中文为“<code>输入</code>”</li><li><mark>o</mark>：<code>output</code>的缩写，翻译成中文为“<code>输出</code>”</li></ul>",2),g=o("<ol><li><mark>printf</mark>：<code>输出函数</code>，作用是将内容<code>输出</code>到控制台面板上</li><li><mark>scanf</mark>：<code>输入函数</code>，作用是通过键盘<code>输入</code>内容到正在允许的程序中</li></ol><p>所以，说到这里，你应当大概能理解我们为什么要我们需要写<code>#include&lt;stdio.h&gt;</code>了吧，因为<code>printf</code>和<code>scanf</code>函数来自于stdio文件，我们想在自己的代码文件中使用到这两个函数，就不得不在源程序编译前进行预先处理 - 导入stdio文件，这样在编译完源程序进行程序运行时才是以合法形式使用printf和scanf。</p><blockquote><p>暂时你只需要知道stdio文件有这两个函数，实际上该文件中还有许多其它常用函数，这里不做列举。</p></blockquote>",3),x=s("code",null,"#include<stdio.h>",-1),w=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//这个程序中就没有使用来自stdio文件的函数如printf</span>
<span class="token comment">//因此当我们编译运行时虽然没有在文件行首声明#include&lt;stdio.h&gt;，也是能够执行成功这个程序的</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学会深度思考，这样即使你突然忘记了某个代码片段的编写，但回顾时是很容易轻松与上手的。</p>`,2),q=o('<h2 id="_3-养成良好的编程习惯" tabindex="-1"><a class="header-anchor" href="#_3-养成良好的编程习惯" aria-hidden="true">#</a> 3.养成良好的编程习惯</h2><p>代码的可读性就显得尤为重要。这里的可读，不仅仅是对自己可读，也要对其他人可读。一段只有自己能读懂的代码，可以说价值很低，而且这样的代码随着时间的推移往往自己也读不懂。而可读性强的代码，不仅方便移植与交流，更给调试带来了难以估量的便利。对于一个团队来讲，制定统一的编程规范，好处是显而易见的。通常一个项目是由多个成员共同完成，在项目中，经常互相调用组内成员的代码。如果两个人的编程习惯和风格差异显著，那么将会浪费大量时间在读懂代码上。相反，一致而良好的编程规范，会让合作开发变得轻松而高效。</p><p>这里介绍几个我觉得比较重要的编程习惯：</p><h3 id="🍀-一定要格式化代码" tabindex="-1"><a class="header-anchor" href="#🍀-一定要格式化代码" aria-hidden="true">#</a> 🍀 一定要格式化代码</h3><p>代码格式化，主要是整理<code>原代码的缩进</code>，以及<code>运算符的间隔</code>（比如通常在运算符左右都有空格）等。目的是使代码缩进清晰，更容易阅读。</p>',5),y=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a的值为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这样的代码，你觉得可读性好吗？特别是在实际开发中代码量远比这个多得多，如果程序有bug需要排查，这对修改代码的人无非是一种巨大的痛苦。</p>`,2),C=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a的值为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🍀-标识符规范命名" tabindex="-1"><a class="header-anchor" href="#🍀-标识符规范命名" aria-hidden="true">#</a> 🍀 标识符规范命名</h3>`,2),V=s("p",null,"标识符概念：",-1),N=s("li",null,"对各种变量、函数、文件等命名时使用的字符序列称为标识符",-1),S=s("p",null,[n("这里以"),s("code",null,"变量"),n("的规范命名为例：")],-1),B=s("li",null,[n("命名的长度应当符合"),s("code",null,"用最少单词表达出最详细的信息"),n("原则。C 是一种简洁的语言, 命名也应该是简洁的。例如变量名MaxVal 就比MaxValueUntilOverflow 好用。标识符的长度一般不要过长。")],-1),L=s("li",null,"另外，英文词尽量不缩写，特别是非常用专业名词，如果有缩写，在同一系统中对同一单词必须使用相同的表示法，并且注明其意思。",-1),M=s("li",null,[n("当标识符由多个词组成时，每个词的第一个字母大写，其余全部小写。比如"),s("code",null,"StudentAge"),n("、"),s("code",null,"StudentFatherName")],-1),D=s("li",null,"尽量避免名字中出现数字编号，如Value1,Value2 等，除非逻辑上的确需要编号。",-1),U=s("li",null,"初学者总是喜欢用带数字的变量名或函数名，这样子看上去很简单方便，但其实是一颗颗定时炸弹。这个习惯初学者一定要改过来。",-1),E=s("h3",{id:"🍀-学会写注释",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🍀-学会写注释","aria-hidden":"true"},"#"),n(" 🍀 学会写注释")],-1),I=s("blockquote",null,[s("p",null,"注释：用于说明解释程序代码的文字就是注解。被注释的文字，不会被编译器编译执行，注释就是给自己或其它程序员看的。")],-1),O=s("h2",{id:"_4-程序是用大脑写的-而不是用手写。",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-程序是用大脑写的-而不是用手写。","aria-hidden":"true"},"#"),n(" 4.程序是用大脑写的，而不是用手写。")],-1),R=s("blockquote",null,[s("p",null,"简单的说：做事之前，要先过遍脑子。")],-1),A=s("p",null,"用大脑写代码的意思就是程序应该是在脑袋里成型的。首先，即便是上边那些混乱的写法，也肯定要过大脑的，毕竟不经过大脑，你其实很难下意识打出一行代码的，但问题就是过大脑的部分实在太少了，每次就那么几行上下文。真正高级的做法是，你能够在脑袋里把整套代码的流程推导一遍，让程序在你的大脑里运行一遍，这时候你会发现写下来会是非常轻松的体力活。有那么一些程序员几乎不加班，但是效率还是很高，那就是因为他们其实无时无刻都能在大脑里写程序。成为一个高级程序最重要的就是要有在大脑里完整的写完一段代码的能力。",-1),F=s("h2",{id:"_5-一定要亲自写代码-能听懂与会使用是两码事",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-一定要亲自写代码-能听懂与会使用是两码事","aria-hidden":"true"},"#"),n(" 5.一定要亲自写代码，能听懂与会使用是两码事")],-1),G=s("blockquote",null,[s("p",null,"纸上得来终觉浅，绝知此事要躬行。")],-1),H=s("p",null,"很多学习编程的人在学会某个知识点或者听懂某个算法后就说自己懂了，却没有去上机实验是非常不可取的。有的东西思想其实很简单，但用代码实现起来可能会让你无所适从，可你却没有去实操就不知道有这些问题，这是非常致命的。",-1),J=s("code",null,"Dennis M. Ritchie",-1),P=s("code",null,"Linus",-1),Q=s("p",null,"无论你将来的职业发展方向是架构师、设计师、分析师、管理者，还是其他职位，只要还与软件打交道，就有必要打好能亲手写出一手好代码的技术基础。",-1);function T(W,X){const a=c("font");return i(),d("div",null,[u,r,k,s("p",null,[n("随着时间的迁移，你的知识范围与知识深度都会大大提高，人的大脑能装的东西是有限的，你肯定会忘记许多曾经学过的知识。"),e(a,{color:"orange"},{default:t(()=>[n("有人说我看书不就行了吗，书上讲的多详细与知识覆盖多广啊？")]),_:1}),n("但实际上，你所需要花的查阅成本比看笔记大的多，笔记上应当有你自己对于知识点的理解，有对需要注意的问题的标注。")]),h,e(a,{color:"cornflowerblue"},{default:t(()=>[n("【为什么要写 #include<stdio.h>】")]),_:1}),s("p",null,[_,n("是预处理命令，这里可以简单理解为就是"),e(a,{color:"red"},{default:t(()=>[n("标识在源程序编译前进行预先的处理工作")]),_:1}),n("。")]),m,s("blockquote",null,[s("p",null,[n("先提一个概念：C语言开发者们编写了很多常用函数，并分门别类的放在了不同的文件，这些文件就称为头文件（header file），以"),v,n("作为后缀名。"),e(a,{color:"red"},{default:t(()=>[n("头文件也是文本文件")]),_:1}),n("。")])]),s("p",null,[n("因此你应当能理解，"),b,n("就是一个"),e(a,{color:"red"},{default:t(()=>[n("文件名为stdio的头文件")]),_:1}),n("，在stdio文件中，包含了许多封装好了的函数供我们程序员使用。")]),f,s("p",null,[n("因此 stdio 文件，即是 "),s("strong",null,[e(a,{color:"red"},{default:t(()=>[n("标准输入输出文件")]),_:1})]),n("。")]),s("p",null,[n("总结 "),e(a,{color:"purple"},{default:t(()=>[n("#include<stdio.h>：在源程序编译前导入标准输入输出（流）文件到我们自己的程序（程序也是文件形式）中。")]),_:1})]),s("p",null,[n("每个头文件中都包含了若干个功能类似的函数，调用某个函数时，要引入对应的头文件，否则编译器找不到函数。你需要知道的是"),e(a,{color:"red"},{default:t(()=>[n("标准输入输出文件")]),_:1}),n("中有两个特别重要的函数：")]),g,s("p",null,[n("📝 根据我们上述分析，如果我们没有使用到stdio文件中的函数，是不是就不需要写"),x,n("呢？答案是"),e(a,{color:"red"},{default:t(()=>[n("不需要写的")]),_:1}),n("，我们举个例子：")]),w,s("p",null,[n("即使是工作了几十年的程序员，也会对于某些功能模块的代码拿不准记不清，也依旧会去网上搜索，把网上现成的代码复制下来加以修改就可以放到自己的项目中。为什么他们能很快速的知道某段代码是干嘛的，知道某段代码该如何修改呢？原因很简单，"),e(a,{color:"red"},{default:t(()=>[n("一方面是已经有了大量的实践经验，一方面是对这段代码所应该起到的作用，实现某个功能的代码逻辑理解很深刻。")]),_:1})]),q,s("p",null,[n("❌ "),e(a,{color:"red"},{default:t(()=>[n("未格式化的代码")]),_:1})]),y,s("p",null,[n("✅ "),e(a,{color:"green"},{default:t(()=>[n("格式化的代码")]),_:1})]),C,s("blockquote",null,[V,s("ol",null,[N,s("li",null,[e(a,{color:"red"},{default:t(()=>[n("凡是可以自己取名字的地方都叫标识符")]),_:1})])])]),S,s("ol",null,[s("li",null,[n("命名应当直观且可以拼读，可望文知意，便于记忆和阅读。"),e(a,{color:"red"},{default:t(()=>[n("最好采用英文单词或其组合，不允许使用拼音。")]),_:1}),n("程序中的英文单词一般不要太复杂，用词应当准确。")]),B,L,M,D,U]),E,I,s("p",null,[n("注解提高了代码的阅读性。"),e(a,{color:"red"},{default:t(()=>[n("会写注释 是 一个程序员必须要具有的良好的编程习惯。")]),_:1}),n("将自己的思维先通过注释整理出来，再用代码去体现。")]),s("p",null,[n("试想一下，在项目开发中，如果遇到BUG，你或其它程序员需要对你的代码进行修改，可能随着时间推移你也早就忘了某段代码到底是干嘛的了，如果你写了注释，程序员能够快速把握你的代码编写思路，极大提高开发效率。"),e(a,{color:"red"},{default:t(()=>[n("写一手好的代码也是一个高级程序员必备的技能之一。")]),_:1})]),O,R,A,s("p",null,[n("如果接受了大脑写代码的说法，那么你会得到一个非常有意思的结论："),s("strong",null,[e(a,{color:"red"},{default:t(()=>[n("用的哪种编程语言并不重要，重要的是思想。")]),_:1})])]),F,G,H,e(a,{color:"red"},{default:t(()=>[n("代码是一切的基石")]),_:1}),n("，看看我们软件界的先辈们吧。"),J,n("决定创造一门“看上去很好”的语言时，如果只是站在高处呐喊，这门语言是划时代的，它有多么优秀，但不去实现，又有何用呢？没有Dennis M. Ritchie的亲自编码实现，C语言不可能诞生，UNIX操作系统也不可能诞生。Linux在聚拢成千上万的开源狂热者对它进行开发和扩展之前，如果没有"),P,n("的编码实现，仅凭他高声呐喊“我要创造一个划时代的操作系统”，有用吗？一切的一切都是以编码实现为前提的，代码是我们前进的基石。这是一个英雄辈出的年代，我们每个人都希望自己被顶礼膜拜，可是这需要资本和实力，而我们的实力体现了我们处理技术问题的能力。"),Q,e(a,{color:"red"},{default:t(()=>[n("一个程序员，如果没有亲手写过几万行代码，没有做过几个好的项目，不能说是一个合格的程序员。")]),_:1})])}const K=l(p,[["render",T],["__file","7-sharing-of-experience-in-programming-learning.html.vue"]]);export{K as default};
